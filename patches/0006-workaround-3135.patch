From ae71a44a6fc62c8a371289e057a4252e3bab6c07 Mon Sep 17 00:00:00 2001
From: =?utf-8?q?Rafa=C3=ABl=20Carr=C3=A9?= <rafael.carre@gmail.com>
Date: Mon, 7 Dec 2009 19:40:40 +0100
Subject: [PATCH 6/7] workaround #3135

---
 modules/packetizer/copy.c         |    2 ++
 modules/packetizer/mpeg4audio.c   |    2 ++
 modules/packetizer/mpeg4video.c   |    2 ++
 modules/packetizer/mpegvideo.c    |    2 ++
 src/stream_output/stream_output.c |    2 ++
 5 files changed, 10 insertions(+), 0 deletions(-)

diff --git a/modules/packetizer/copy.c b/modules/packetizer/copy.c
index b6046ac..8d82cc4 100644
--- a/modules/packetizer/copy.c
+++ b/modules/packetizer/copy.c
@@ -145,12 +145,14 @@ static block_t *Packetize ( decoder_t *p_dec, block_t **pp_block )
         p_block->i_dts = p_block->i_pts;
     }
 
+#if VLC_TS_INVALID != 0 /* 0 is a valid timestamp */
     if( p_block->i_dts <= VLC_TS_INVALID )
     {
         msg_Dbg( p_dec, "need valid dts" );
         block_Release( p_block );
         return NULL;
     }
+#endif
 
     if( p_ret != NULL && p_block->i_pts > p_ret->i_pts )
     {
diff --git a/modules/packetizer/mpeg4audio.c b/modules/packetizer/mpeg4audio.c
index f47aecb..019f127 100644
--- a/modules/packetizer/mpeg4audio.c
+++ b/modules/packetizer/mpeg4audio.c
@@ -299,6 +299,7 @@ static block_t *PacketizeRawBlock( decoder_t *p_dec, block_t **pp_block )
     p_block = *pp_block;
     *pp_block = NULL; /* Don't reuse this block */
 
+#if 0
     if( !date_Get( &p_sys->end_date ) && p_block->i_pts <= VLC_TS_INVALID )
     {
         /* We've just started the stream, wait for the first PTS. */
@@ -307,6 +308,7 @@ static block_t *PacketizeRawBlock( decoder_t *p_dec, block_t **pp_block )
     }
     else if( p_block->i_pts > VLC_TS_INVALID &&
              p_block->i_pts != date_Get( &p_sys->end_date ) )
+#endif
     {
         date_Set( &p_sys->end_date, p_block->i_pts );
     }
diff --git a/modules/packetizer/mpeg4video.c b/modules/packetizer/mpeg4video.c
index b482c61..3f97494 100644
--- a/modules/packetizer/mpeg4video.c
+++ b/modules/packetizer/mpeg4video.c
@@ -246,6 +246,7 @@ static int PacketizeValidate( void *p_private, block_t *p_au )
     decoder_t *p_dec = p_private;
     decoder_sys_t *p_sys = p_dec->p_sys;
 
+#if 0
     /* We've just started the stream, wait for the first PTS.
      * We discard here so we can still get the sequence header. */
     if( p_sys->i_interpolated_pts <= VLC_TS_INVALID &&
@@ -254,6 +255,7 @@ static int PacketizeValidate( void *p_private, block_t *p_au )
         msg_Dbg( p_dec, "need a starting pts/dts" );
         return VLC_EGENERIC;
     }
+#endif
 
     /* When starting the stream we can have the first frame with
      * a null DTS (i_interpolated_pts is initialized to 0) */
diff --git a/modules/packetizer/mpegvideo.c b/modules/packetizer/mpegvideo.c
index a09016f..34be8ab 100644
--- a/modules/packetizer/mpegvideo.c
+++ b/modules/packetizer/mpegvideo.c
@@ -331,6 +331,7 @@ static int PacketizeValidate( void *p_private, block_t *p_au )
         p_au->i_flags |= BLOCK_FLAG_DISCONTINUITY;
     }
 
+#if 0
     /* We've just started the stream, wait for the first PTS.
      * We discard here so we can still get the sequence header. */
     if( p_sys->i_dts <= VLC_TS_INVALID && p_sys->i_pts <= VLC_TS_INVALID &&
@@ -339,6 +340,7 @@ static int PacketizeValidate( void *p_private, block_t *p_au )
         msg_Dbg( p_dec, "need a starting pts/dts" );
         return VLC_EGENERIC;
     }
+#endif
 
     /* When starting the stream we can have the first frame with
      * an invalid DTS (i_interpolated_pts is initialized to VLC_TS_INVALID) */
diff --git a/src/stream_output/stream_output.c b/src/stream_output/stream_output.c
index 8fbfbb0..0386970 100644
--- a/src/stream_output/stream_output.c
+++ b/src/stream_output/stream_output.c
@@ -269,12 +269,14 @@ int sout_InputSendBuffer( sout_packetizer_input_t *p_input,
         return VLC_SUCCESS;
     }
 
+#if VLC_TS_INVALID != 0 /* 0 is a valid timestamp */
     if( p_buffer->i_dts <= VLC_TS_INVALID )
     {
         msg_Warn( p_sout, "trying to send non-dated packet to stream output!");
         block_Release( p_buffer );
         return VLC_SUCCESS;
     }
+#endif
 
     vlc_mutex_lock( &p_sout->lock );
     i_ret = p_sout->p_stream->pf_send( p_sout->p_stream,
-- 
1.6.3.3

